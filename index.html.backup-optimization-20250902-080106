
<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate">
    <meta http-equiv="Pragma" content="no-cache">
    <meta http-equiv="Expires" content="0">
    <title>体重管理アプリ</title>
    
    <!-- 外部CSS -->
    <link rel="stylesheet" href="custom/styles.css">
    <link rel="stylesheet" href="tabs/tab3-room-cleaning/room-cleaning.css">
    <link rel="stylesheet" href="tabs/tab4-stretch/tab-stretch.css">
    <link rel="stylesheet" href="tabs/tab8-memo-list/memo-list.css">
    <link rel="stylesheet" href="shared/styles/app-layout.css">
    <link rel="stylesheet" href="shared/styles/timing-clothing-buttons.css">
    
    <!-- 外部JS -->
    <script src="https://www.gstatic.com/firebasejs/8.10.0/firebase-app.js"></script>
    <script src="https://www.gstatic.com/firebasejs/8.10.0/firebase-auth.js"></script>
    <script src="https://www.gstatic.com/firebasejs/8.10.0/firebase-database.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns"></script>
    <script type="module" src="custom/app-config.js"></script>
    <script src="shared/common-functions.js"></script>
    <script src="shared/utils/validation.js"></script>
    <script src="shared/utils/custom-items.js"></script>
    <script src="shared/utils/data-operations.js"></script>
    <script src="shared/components/dom-utils.js"></script>
    <script src="shared/components/mode-control.js"></script>
    <script src="shared/core/auth.js"></script>
    <script src="shared/utils/debug.js"></script>
    <script src="shared/utils/logging.js"></script>
</head>
<body>
    <div class="container">
        <!-- ユーザー情報表示（一番上） -->
        <div class="user-info hidden" id="userInfo" style="margin-bottom: 10px;">
            <span>👤 ログイン中: <span id="userName"></span></span>
            <button class="logout-button" onclick="handleLogout()">ログアウト</button>
        </div>

        <!-- タブナビゲーション -->
        <div id="tabNavigation" class="hidden" style="margin-bottom: 15px;">
            <div id="tabRow1" class="tab-row"></div>
            <div id="tabRow2" class="tab-row"></div>
        </div>

        <!-- アプリタイトル -->
        <div class="app-header hidden" id="appHeader">
            <h1 class="app-title" id="appTitle">📊 体重管理アプリ</h1>
            <p class="app-subtitle">Core/Customフォルダ分離版 - Firebase + Google認証</p>
        </div>

        <!-- 認証セクション -->
        <div class="auth-section" id="authSection">
            <h1 class="app-title">📊 体重管理アプリ</h1>
            <p class="app-subtitle">Core/Customフォルダ分離版 - Firebase + Google認証</p>
            <h3>🔐 ログイン</h3>
            <p>Googleアカウントでログインしてデータを保存・同期できます</p>
            <button class="auth-button" onclick="handleGoogleLogin()">Googleでログイン</button>
        </div>

        <!-- タブコンテンツ -->
        <div id="tabContent1" class="tab-content">
            <!-- 体重管理コンテンツは動的読み込み -->
        </div>

        <!-- 共通ログエリア（全タブ用） -->
        <div class="hidden" id="globalLogArea">
            <h3>📋 アプリログ <button class="universal-copy-btn" onclick="copyLogs()" style="background: #28a745; color: white; border: none; padding: 4px 8px; border-radius: 3px; cursor: pointer; font-size: 12px;">📋 ログをコピー</button></h3>
            <div class="data-area" id="logArea">
                アプリテンプレート起動完了...<br>
                🔥 Firebase設定完了<br>
                🔐 Google認証準備完了<br>
            </div>
            
            <div id="debugButtons" class="debug-button-grid"></div>
        </div>


        <!-- タブコンテンツ2 -->
        <div id="tabContent2" class="tab-content hidden">
            <!-- コンテンツは動的読み込み -->
        </div>

        <!-- タブコンテンツ3 -->
        <div id="tabContent3" class="tab-content hidden">
            <!-- コンテンツは動的読み込み -->
        </div>

        <!-- タブコンテンツ4: ストレッチ -->
        <div id="tabContent4" class="tab-content hidden">
            <!-- ストレッチコンテンツは動的読み込み -->
        </div>

        <!-- 実装済みタブ（動的読み込み） -->
        <div id="tabContent5" class="tab-content hidden"></div>
        <div id="tabContent6" class="tab-content hidden"></div>
        <div id="tabContent7" class="tab-content hidden"></div>
        <div id="tabContent8" class="tab-content hidden"><!-- メモリスト動的読み込み --></div>
        <div id="tabContent9" class="tab-content hidden"></div>
        <div id="tabContent10" class="tab-content hidden"></div>
        <div id="tabContent11" class="tab-content hidden"></div>
        <div id="tabContent12" class="tab-content hidden"></div>
        <div id="tabContent13" class="tab-content hidden"></div>
        <div id="tabContent14" class="tab-content hidden"></div>
        <div id="tabContent15" class="tab-content hidden"></div>
        <div id="tabContent16" class="tab-content hidden"></div>
    </div>

    <script>
        const firebaseConfig = {
            apiKey: "AIzaSyA5PXKChizYDCXF_GJ4KL6Ylq9K5hCPXWE",
            authDomain: "shares-b1b97.firebaseapp.com",
            databaseURL: "https://shares-b1b97-default-rtdb.firebaseio.com",
            projectId: "shares-b1b97",
            storageBucket: "shares-b1b97.firebasestorage.app",
            messagingSenderId: "38311063248",
            appId: "1:38311063248:web:0d2d5726d12b305b24b8d5"
        };
        firebase.initializeApp(firebaseConfig);
        const auth = firebase.auth();
        const database = firebase.database();
        let currentUser = null, currentTab = 1;
        const APP_VERSION = 'v2.13';
        // 認証状態の監視（改良版 + リダイレクト対応）
        auth.onAuthStateChanged(async (user) => {
            currentUser = user;
            if (user) {
                log(`✅ 認証状態確認: ${user.displayName} でログイン中`);
                log(`📧 メール: ${user.email}`);
                showUserInterface(user);
                log('🔄 体重データ読み込み（外部JSで実行）');
            } else {
                // リダイレクト結果をチェック（iPhone対応）
                try {
                    const result = await auth.getRedirectResult();
                    if (result.user) {
                        log(`✅ リダイレクトログイン成功: ${result.user.displayName}`);
                    }
                } catch (error) {
                    // リダイレクトエラーは無視（初回アクセス時など）
                }
                log('🔒 認証状態: 未ログイン');
                showLoginInterface();
            }
        });

        // 初期化完了ログ
        log('🔄 Firebase認証システム初期化完了 - 認証状態を確認中...');










        // タブコンテンツ動的読み込み
        window.loadTabContent = async (tabNumber, tabType) => {
            try {
                const tabContentDiv = document.getElementById(`tabContent${tabNumber}`);
                if (!tabContentDiv) return;
                
                // HTMLコンテンツを読み込み
                const response = await fetch(`tabs/tab${tabNumber}-${tabType}/tab-${tabType}.html`);
                if (response.ok) {
                    const htmlContent = await response.text();
                    tabContentDiv.innerHTML = htmlContent;
                    
                    // JavaScriptファイルを動的読み込み
                    await loadTabScript(tabNumber, tabType);
                    
                    // タブ固有の初期化処理（JSファイル読み込み完了後）
                    if (tabNumber === 1 && currentUser) {
                        log(`🔄 tab1: 体重管理タブ初期化実行`);
                        
                        // 外部JSファイルの初期化関数を呼び出し
                        setTimeout(() => {
                            if (typeof window.initWeightTab === 'function') {
                                window.initWeightTab();
                                log('✅ 体重管理タブ初期化完了');
                            } else {
                                log('❌ initWeightTab関数が見つかりません');
                            }
                        }, 200);
                    } else if (tabNumber === 3 && currentUser) {
                        log('🔄 部屋片付けタブ: JS読み込み完了後のデータ読み込み開始');
                        setTimeout(() => {
                            if (typeof window.loadRoomData === 'function') {
                                window.loadRoomData();
                                log('✅ 部屋片付けデータ読み込み実行');
                            } else if (typeof loadRoomData === 'function') {
                                loadRoomData();
                                log('✅ 部屋片付けデータ読み込み実行（ローカル関数）');
                            } else {
                                log('❌ loadRoomData関数が見つかりません');
                            }
                        }, 200); // 少し長めの待機時間
                    } else if (tabNumber === 8 && currentUser) {
                        log('🔄 メモリストタブ: JS読み込み完了後のデータ読み込み開始');
                        setTimeout(() => {
                            loadMemoData();
                        }, 100);
                    }
                    
                    log(`✅ タブ${tabNumber}（${tabType}）コンテンツ読み込み完了`);
                } else {
                    log(`⚠️ タブ${tabNumber}の分離ファイルが見つかりません - 既存コンテンツを使用`);
                }
            } catch (error) {
                log(`❌ タブ読み込みエラー: ${error.message}`);
            }
        };
        
        // タブ用JavaScriptの動的読み込み
        window.loadTabScript = async (tabNumber, tabType) => {
            try {
                // 既存のスクリプトタグを削除
                const existingScript = document.getElementById(`tab${tabNumber}Script`);
                if (existingScript) {
                    existingScript.remove();
                }
                
                // 新しいスクリプトタグを作成
                const script = document.createElement('script');
                script.id = `tab${tabNumber}Script`;
                script.src = `tabs/tab${tabNumber}-${tabType}/tab-${tabType}.js`;
                document.head.appendChild(script);
                
                return new Promise((resolve, reject) => {
                    script.onload = () => resolve();
                    script.onerror = () => reject(new Error(`Script load failed: ${script.src}`));
                });
            } catch (error) {
                throw error;
            }
        };

        // タブ切り替え機能（動的読み込み対応）
        window.switchTab = async (tabNumber) => {
            currentTab = tabNumber;
            
            // 現在のタブを localStorage に保存
            localStorage.setItem('currentTab', tabNumber);
            
            // すべてのタブボタンを非アクティブに（16タブ対応）
            for (let i = 1; i <= 16; i++) {
                const tabBtn = document.getElementById(`tab${i}`);
                const tabContent = document.getElementById(`tabContent${i}`);
                
                log(`🔍 タブ${i}: ボタン=${tabBtn ? '存在' : 'なし'}, コンテンツ=${tabContent ? '存在' : 'なし'}`);
                
                if (i === tabNumber) {
                    // アクティブタブ
                    if (tabBtn) {
                        tabBtn.style.background = '#007bff';
                        tabBtn.style.color = 'white';
                    }
                    if (tabContent) {
                        tabContent.classList.remove('hidden');
                        log(`✅ タブ${i}コンテンツを表示`);
                    }
                    
                    // 動的読み込み（全分離タブ統一）
                    if (i === 1) {
                        await loadTabContent(1, 'weight');
                    } else if (i === 2) {
                        await loadTabContent(2, 'sleep');
                    } else if (i === 3) {
                        await loadTabContent(3, 'room-cleaning');
                    } else if (i === 4) {
                        await loadTabContent(4, 'stretch');
                    } else if (i === 8) {
                        await loadTabContent(8, 'memo-list');
                    }
                } else {
                    // 非アクティブタブ
                    if (tabBtn) {
                        tabBtn.style.background = '#f8f9fa';
                        tabBtn.style.color = '#495057';
                    }
                    if (tabContent) {
                        tabContent.classList.add('hidden');
                        log(`❌ タブ${i}コンテンツを非表示`);
                    }
                }
            }
            
            // タイトル更新
            const tabTitles = {
                1: '📊 体重管理アプリ',
                2: '🛏️ 睡眠管理',
                3: '🏠 部屋片づけ',
                4: '🤸 ストレッチ',
                5: '🔧 xx5',
                6: '🔧 xx6', 
                7: '🔧 xx7',
                8: '📝 メモリスト'
            };
            
            const titleElement = document.getElementById('appTitle');
            if (titleElement && tabTitles[tabNumber]) {
                titleElement.textContent = `${tabTitles[tabNumber]} ${APP_VERSION}`;
            }
            
            // 体重管理要素は常に表示（tabContent1内にあるため自動制御される）
            
            // タブ固有の初期化処理
            if (tabNumber === 1) {
                // 体重管理タブの初期化（外部JSで処理）
                if (currentUser && typeof window.initWeightTab === 'function') {
                    log('🔄 体重管理タブ: 外部JS初期化実行');
                    window.initWeightTab();
                }
            } else if (tabNumber === 2) {
                // 睡眠管理タブの初期化（ログインに関係なく実行）
                initializeSleepManager();
                if (currentUser) {
                    loadSleepData();
                }
            } else if (tabNumber === 3) {
                // 部屋片付けタブの初期化（データ読み込みはloadTabContent完了後に実行）
                log('🔄 部屋片付けタブに切り替え - 初期化のみ実行');
                initRoomManagement();
            } else if (tabNumber === 8) {
                // メモリストタブの初期化（データ読み込みはloadTabContent完了後に実行）
                log('🔄 メモリストタブに切り替え - 初期化のみ実行');
            }
            
            log(`📑 タブ切り替え: タブ${tabNumber}`);
        };

        // UI表示制御
        function showUserInterface(user) {
            document.getElementById('authSection').classList.add('hidden');
            document.getElementById('userInfo').classList.remove('hidden');
            document.getElementById('tabNavigation').classList.remove('hidden');
            document.getElementById('appHeader').classList.remove('hidden');
            // 体重管理関連要素は存在チェック後に表示
            const modeControl = document.getElementById('modeControl');
            if (modeControl) modeControl.classList.remove('hidden');
            
            const weightInput = document.getElementById('weightInput');
            if (weightInput) weightInput.classList.remove('hidden');
            
            const chartPanel = document.getElementById('chartPanel');
            if (chartPanel) chartPanel.classList.remove('hidden');
            
            const weightHistoryPanel = document.getElementById('weightHistoryPanel');
            if (weightHistoryPanel) weightHistoryPanel.classList.remove('hidden');
            document.getElementById('userName').textContent = user.displayName;
            
            // 保存されたタブまたはデフォルトでタブ1を表示
            const savedTab = localStorage.getItem('currentTab');
            const tabToShow = savedTab ? parseInt(savedTab) : 1;
            switchTab(tabToShow);
            
            // 日付初期化は各タブの外部JSファイルで実行
            
            // メモデータを読み込み（ログイン時、存在チェック付き）
            if (typeof loadMemoData === 'function') {
                loadMemoData();
                log('✅ メモデータ読み込み実行');
            } else {
                log('⚠️ loadMemoData関数未定義 - 初期化時スキップ');
            }
            
            // タイミングボタンの初期状態設定
            document.querySelectorAll('.timing-btn').forEach(btn => {
                btn.style.opacity = '0.7';
                btn.classList.remove('selected');
            });
            
            // 服装ボタンの初期状態設定
            document.querySelectorAll('.clothing-btn').forEach(btn => {
                btn.style.opacity = '0.7';
                btn.style.transform = 'scale(1)';
            });
            
            // デフォルト服装選択（外部JSファイルで実行）
            
        }

        function showLoginInterface() {
            document.getElementById('authSection').classList.remove('hidden');
            document.getElementById('userInfo').classList.add('hidden');
            document.getElementById('tabNavigation').classList.add('hidden');
            document.getElementById('appHeader').classList.add('hidden');
            document.getElementById('modeControl').classList.add('hidden');
            document.getElementById('weightInput').classList.add('hidden');
            document.getElementById('chartPanel').classList.add('hidden');
        }


        // アプリ初期化
        function initializeApp() {
            // バージョン表示の動的設定
            document.title = `体重管理アプリ ${APP_VERSION}`;
            document.getElementById('appTitle').textContent = `📊 体重管理アプリ ${APP_VERSION}`;
            
            log(`🚀 体重管理アプリ起動完了 ${APP_VERSION}`);
            log('🔐 認証システム準備完了');
        }

        // 初期化実行
        initializeApp();
        
        // プロトコルチェック（自動診断）
        if (window.location.protocol === 'file:') {
            log('⚠️ file://プロトコル検出 - Googleログインには HTTPサーバーが必要です');
            log('💡 解決方法: python -m http.server 8000 または chrome://flags設定');
        }

    </script>
</body>
</html>
