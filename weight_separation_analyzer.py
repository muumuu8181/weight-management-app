#!/usr/bin/env python3
"""
体重管理コード完全分離ツール
index.htmlから体重関連コードを自動検出・分析
"""

import re
import json
from pathlib import Path

class WeightCodeAnalyzer:
    def __init__(self, index_file="index.html"):
        self.index_file = Path(index_file)
        self.weight_patterns = [
            r'weight[A-Z]\w*',  # weightChart, weightValue etc
            r'Weight[A-Z]\w*',  # WeightTab etc
            r'\.weight-\w+',    # CSS classes
            r'loadUserWeightData',
            r'saveWeightData',
            r'allWeightData',
            r'selectedTimingValue',
            r'selectedTopValue', 
            r'selectedBottomValue',
            r'editingEntryId',
            r'weightChart',
            r'timing.*btn',     # timing buttons
            r'clothing.*btn',   # clothing buttons
        ]
        
    def analyze(self):
        """index.htmlから体重関連コードを全検出"""
        if not self.index_file.exists():
            return {"error": f"{self.index_file} not found"}
            
        content = self.index_file.read_text(encoding='utf-8')
        lines = content.split('\n')
        
        results = {
            "total_lines": len(lines),
            "weight_related": [],
            "functions_to_remove": [],
            "variables_to_remove": [],
            "css_to_remove": []
        }
        
        # 各行をチェック
        for line_num, line in enumerate(lines, 1):
            for pattern in self.weight_patterns:
                if re.search(pattern, line, re.IGNORECASE):
                    results["weight_related"].append({
                        "line": line_num,
                        "content": line.strip(),
                        "pattern": pattern
                    })
                    
        # 関数ブロックの検出
        function_patterns = [
            r'window\.saveWeightData\s*=.*?\{',
            r'window\.loadUserWeightData\s*=.*?\{',
            r'function.*weight.*\(',
            r'async.*weight.*\('
        ]
        
        for pattern in function_patterns:
            matches = re.finditer(pattern, content, re.IGNORECASE | re.MULTILINE)
            for match in matches:
                start_pos = match.start()
                line_num = content[:start_pos].count('\n') + 1
                results["functions_to_remove"].append({
                    "line": line_num,
                    "pattern": pattern,
                    "match": match.group()
                })
        
        return results
    
    def generate_removal_script(self, analysis_result):
        """除去スクリプト生成"""
        script_lines = [
            "#!/bin/bash",
            "# 体重関連コード自動除去スクリプト",
            "# Generated by WeightCodeAnalyzer",
            "",
            "BACKUP_FILE='index.html.pre-separation-backup'",
            "cp index.html $BACKUP_FILE",
            "echo '✅ バックアップ作成: $BACKUP_FILE'",
            "",
        ]
        
        # CSS除去
        css_removes = [
            "sed -i 's/\\.weight-input[^}]*}//g' index.html",
            "echo '✅ weight-input CSS除去完了'"
        ]
        
        # 変数除去  
        var_removes = [
            "sed -i '/let.*weight.*=/d' index.html",
            "sed -i '/const.*weight.*=/d' index.html", 
            "sed -i '/window\\.editingEntryId/d' index.html",
            "echo '✅ 体重関連変数除去完了'"
        ]
        
        script_lines.extend(css_removes)
        script_lines.extend(var_removes)
        
        script_lines.extend([
            "",
            "echo '🎯 体重関連コード除去完了'",
            f"echo '📊 処理対象: {len(analysis_result['weight_related'])}箇所'",
            "wc -l index.html"
        ])
        
        return '\n'.join(script_lines)

if __name__ == "__main__":
    analyzer = WeightCodeAnalyzer()
    result = analyzer.analyze()
    
    print("体重関連コード分析結果")
    print(f"総行数: {result['total_lines']}")
    print(f"体重関連コード: {len(result['weight_related'])}箇所")
    print(f"関数ブロック: {len(result['functions_to_remove'])}個")
    
    # 詳細結果をJSONで出力
    with open('weight_analysis.json', 'w') as f:
        json.dump(result, f, indent=2, ensure_ascii=False)
    
    # 除去スクリプト生成
    removal_script = analyzer.generate_removal_script(result)
    with open('remove_weight_code.sh', 'w') as f:
        f.write(removal_script)
    
    print("\n生成ファイル:")
    print("- weight_analysis.json (詳細分析結果)")  
    print("- remove_weight_code.sh (自動除去スクリプト)")
    print("\n次のステップ: bash remove_weight_code.sh")